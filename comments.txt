/**
* Краткое описание
*
* Подробное описание
* которое возможно в несколько строк
*
* @тег значение
*/

**************************************************************************************
https://manual.phpdoc.org/
***************************************************************************************

    @api (метод) — обозначает стабильные публичные методы, которые не будут менять свою семантику до следующего мажорного релиза.
    @author (в любом месте) — указывает имя и имейл автора, который написал следующий код.
    @copyright (в любом месте) — используется, чтоб поставить свой копирайт в коде.
    @deprecated (в любом месте) — полезный тег, символизирует, что данный элемент исчезнет в будущих версиях. Обычно рядом пишут, какой код следует использовать взамен. Также большинство IDE подсвечивают использование устаревших методов отдельным стилем. Когда нужно подчистить устаревший код для нового релиза, то легко искать по этому тегу.
    @example (в любом месте) — используется для размещения ссылки на файл или веб-страницу, где показан пример использования кода. На данный момент phpDocumentor заявляет о неполной поддержки возможностей этого тега.
    @filesource (файл) — этот тег можно размещать только на самом начале php-файла, так как тег применим только к файлу и включит весь код файла в сгенерированную документацию.
    @global (переменная) — на данный момент этот тег не поддерживается, возможно, будет реализован в следующих версиях, когда он будет переосмыслен.
    @ignore (в любом месте) — докблок, где указан этот тег, не будет обрабатываться во время генерации документации, даже если в нем есть другие теги.
    @internal (в любом месте) — чаще всего используется вместе с тегом @api, чтоб показать, что код предназначен для внутренней логики этой части программы. Элемент, обозначенный этим тегом, не будет включен в документацию.
    @license (файл, класс) — указывает тип лицензии для написанного кода.
    @link (в любом месте) — используется для вставки ссылок, но, как пишет документация, полностью функциональность тега пока не поддерживается.
    @method (класс) — применяется к классу и служит для описания магических методов, которые обрабатываются магической функцией __call().
    @package (файл, класс) — разбиение кода на логические подгруппы. Когда вы помещаете классы в один namespace, вы тем самым показывает их функциональную схожесть. Если классы лежат в разных неймспейсах, но имеют одинаковый логический признак, их можно сгруппировать с помощью этого тега, например, если у вас классы работающие с корзиной заказа разбросаны по разным местам. Но лучше отказаться от такой практики, по код стайлу Symfony, например, этот тег не должен использоваться.
    @param (метод, функция) — предназначен для описания входящих параметров функции. Важно также отметить, что если вы уже взялись описывать входящие параметры для конкретной функции через докблоки, то нужно описывать все, а не только первый или второй.
    @property (класс) — так же, как и @method, этот тег размещается в докблоке для класса, но описывает свойства, доступ к которым будет обрабатываться через магические методы __get() и __set().
    @property-read, @property-write (класс) — аналогично предыдущему тегу, но обрабатывают только один магический метод, __get() или __set() соответственно.
    @return (метод, функция) — предназначен для описания значения, которое возвращает функция. Можно указать его тип, и PhpStorm подхватит его и будет выдавать подсказки, но об этом чуть позже.
    @see (в любом месте) — с помощь этого тега можно вставлять ссылки на внешние ресурсы, как и с помощью @link, но также вставлять относительные ссылки на классы и методы.
    @since (в любом месте) — можно указать версию, в которой появился кусок кода.
    @source (в любом месте, кроме начала файла) — с помощью этого тега можно помещать в документацию участки исходного кода (задается строка начала и конца).
    @throws (метод, функция) — используется для указания исключений, которые могут быть вызваны в данной функции.
    @todo (в любом месте) — самый оптимистически тег, используется программистами, чтоб напомнить себе доделать что-то, когда-то в каком-то участке кода. IDE умеют распознавать этот тег и группируют все участки кода в отдельном окне, удобно для будущего поиска. Это общепринятый стандарт и используется очень часто.
    @uses (в любом месте) — предназначен для отображения связи между разными участками кода. Он чем-то похож на @see, но разница в том, что @see создает однонаправленную ссылку, т.е. после перехода на новую страницу документации у вас не будет ссылки назад, а @uses в процессе его обработки ставит обратную ссылку, т.е. ссылку для обратной навигации.
    @var (переменная) — используется для указания типа и описания переменных, как тех, что встречаются внутри функций, так и свойств класса. Следует учесть разницу между этим тегом и тегом @param. Тег @param используется только в докблоках для функций и описывает входящие параметры, а @var используется для документирования обычных переменных.
    @version (в любом месте) — обозначает текущую версию программы, в которой появился данный класс, метод и т.д.

Устаревшие теги, которые, скорее всего, в будущем не будут поддерживаться:

    @category (файл, класс) — использовался для группирования пакетов вместе.
    @subpackage (файл, класс) — использовался для выделения определенных групп в пакетах.
**************************************************************************************
***************************************************************************************
<?php
/**
* Fримера документирования
*
* @author IVAN
* @version 1.0
* @package files
*/

/**
* Константа
*/
define('testing', 6);

/**
* Просто класс
* @package files
* @subpackage classes
*/
class Test {
	/**
	* Переменная хранящая значение типа integer
	* @link http://www.example.com Подробное описание. 
	* @see setdata
	* @access private
	* @var integer
	*/
	var $data;

	/**
	* Установка значения
	* @param integer $data Значение для установки в {@link $data}
	* @uses Test::$data Для размещения данных
	* @return void
	*/
	function setdata($data)
	{
		$this->data = $data;
	}
	
	/**
	* Обычная функция
	* @global Test показываем что мы используем глобальную переменную $a
	* @staticvar string $var Эту переменную мы будем возвращать
	* @param string $param1 Первый параметр функции
	* @param string $param2 Второй параметр
	* @return string
	*/
	function func($param1, $param2 = 'value')
	{
		static $var = 7;
		global $a;
		return $var;
	}
}



